// frontend/vercel.json
{
  "name": "argfy-frontend",
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "env": {
    "NEXT_PUBLIC_BACKEND_URL": "@backend_url",
    "NEXT_PUBLIC_API_BASE": "@api_base_url"
  },
  "build": {
    "env": {
      "NEXT_PUBLIC_BACKEND_URL": "https://argfy-backend.onrender.com",
      "NEXT_PUBLIC_API_BASE": "https://argfy-backend.onrender.com/api/v1"
    }
  },
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-Frame-Options", 
          "value": "DENY"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        }
      ]
    }
  ],
  "rewrites": [
    {
      "source": "/api/(.*)",
      "destination": "https://argfy-backend.onrender.com/api/$1"
    }
  ]
}

// backend/render.yaml
services:
  - type: web
    name: argfy-backend
    env: python
    region: oregon
    plan: free
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
      python scripts/init_database.py
    startCommand: uvicorn app.main:app --host 0.0.0.0 --port $PORT
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: DATABASE_URL
        value: sqlite:///./data/argentina.db
      - key: ENVIRONMENT
        value: production
      - key: DEBUG
        value: false
      - key: SECRET_KEY
        generateValue: true
      - key: CORS_ORIGINS
        value: '["https://argfy.vercel.app", "https://argfy-demo.vercel.app"]'
    healthCheckPath: /health
    autoDeploy: true

// deployment/docker-compose.yml
version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./data/argentina.db
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ./backend/data:/app/data
    depends_on:
      - db
    networks:
      - argfy-network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8000
      - NEXT_PUBLIC_API_BASE=http://backend:8000/api/v1
    depends_on:
      - backend
    networks:
      - argfy-network

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=argfy
      - POSTGRES_USER=argfy
      - POSTGRES_PASSWORD=argfy123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - argfy-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - argfy-network

volumes:
  postgres_data:
  redis_data:

networks:
  argfy-network:
    driver: bridge

// frontend/Dockerfile
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED 1

RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

CMD ["node", "server.js"]